# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class DetectMultiBackend(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(DetectMultiBackend, self).__init__()
        self.module_0 = py_nndct.nn.Input() #DetectMultiBackend::input_0(DetectMultiBackend::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/Conv2d[conv]/ret.3(DetectMultiBackend::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/LeakyReLU[act]/9911(DetectMultiBackend::nndct_leaky_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/Conv2d[conv]/ret.5(DetectMultiBackend::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/LeakyReLU[act]/9933(DetectMultiBackend::nndct_leaky_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/Conv2d[conv]/ret.7(DetectMultiBackend::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/LeakyReLU[act]/9955(DetectMultiBackend::nndct_leaky_relu_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.9(DetectMultiBackend::nndct_conv2d_7)
        self.module_8 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/9977(DetectMultiBackend::nndct_leaky_relu_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.11(DetectMultiBackend::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/9999(DetectMultiBackend::nndct_leaky_relu_10)
        self.module_11 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/ret.13(DetectMultiBackend::nndct_elemwise_add_11)
        self.module_12 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/Conv2d[conv]/ret.15(DetectMultiBackend::nndct_conv2d_12)
        self.module_13 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/LeakyReLU[act]/10024(DetectMultiBackend::nndct_leaky_relu_13)
        self.module_14 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/ret.17(DetectMultiBackend::nndct_concat_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/Conv2d[conv]/ret.19(DetectMultiBackend::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/LeakyReLU[act]/10050(DetectMultiBackend::nndct_leaky_relu_16)
        self.module_17 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/Conv2d[conv]/ret.21(DetectMultiBackend::nndct_conv2d_17)
        self.module_18 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/LeakyReLU[act]/10072(DetectMultiBackend::nndct_leaky_relu_18)
        self.module_19 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/Conv2d[conv]/ret.23(DetectMultiBackend::nndct_conv2d_19)
        self.module_20 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/LeakyReLU[act]/10094(DetectMultiBackend::nndct_leaky_relu_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.25(DetectMultiBackend::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/10116(DetectMultiBackend::nndct_leaky_relu_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.27(DetectMultiBackend::nndct_conv2d_23)
        self.module_24 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/10138(DetectMultiBackend::nndct_leaky_relu_24)
        self.module_25 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/ret.29(DetectMultiBackend::nndct_elemwise_add_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.31(DetectMultiBackend::nndct_conv2d_26)
        self.module_27 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/10163(DetectMultiBackend::nndct_leaky_relu_27)
        self.module_28 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.33(DetectMultiBackend::nndct_conv2d_28)
        self.module_29 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/10185(DetectMultiBackend::nndct_leaky_relu_29)
        self.module_30 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/ret.35(DetectMultiBackend::nndct_elemwise_add_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/Conv2d[conv]/ret.37(DetectMultiBackend::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/LeakyReLU[act]/10210(DetectMultiBackend::nndct_leaky_relu_32)
        self.module_33 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/ret.39(DetectMultiBackend::nndct_concat_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/Conv2d[conv]/ret.41(DetectMultiBackend::nndct_conv2d_34)
        self.module_35 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/LeakyReLU[act]/10236(DetectMultiBackend::nndct_leaky_relu_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/Conv2d[conv]/ret.43(DetectMultiBackend::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/LeakyReLU[act]/10258(DetectMultiBackend::nndct_leaky_relu_37)
        self.module_38 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/Conv2d[conv]/ret.45(DetectMultiBackend::nndct_conv2d_38)
        self.module_39 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/LeakyReLU[act]/10280(DetectMultiBackend::nndct_leaky_relu_39)
        self.module_40 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.47(DetectMultiBackend::nndct_conv2d_40)
        self.module_41 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/10302(DetectMultiBackend::nndct_leaky_relu_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.49(DetectMultiBackend::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/10324(DetectMultiBackend::nndct_leaky_relu_43)
        self.module_44 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/ret.51(DetectMultiBackend::nndct_elemwise_add_44)
        self.module_45 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.53(DetectMultiBackend::nndct_conv2d_45)
        self.module_46 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/LeakyReLU[act]/10349(DetectMultiBackend::nndct_leaky_relu_46)
        self.module_47 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.55(DetectMultiBackend::nndct_conv2d_47)
        self.module_48 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/LeakyReLU[act]/10371(DetectMultiBackend::nndct_leaky_relu_48)
        self.module_49 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/ret.57(DetectMultiBackend::nndct_elemwise_add_49)
        self.module_50 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/Conv2d[conv]/ret.59(DetectMultiBackend::nndct_conv2d_50)
        self.module_51 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/LeakyReLU[act]/10396(DetectMultiBackend::nndct_leaky_relu_51)
        self.module_52 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/Conv2d[conv]/ret.61(DetectMultiBackend::nndct_conv2d_52)
        self.module_53 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/LeakyReLU[act]/10418(DetectMultiBackend::nndct_leaky_relu_53)
        self.module_54 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/ret.63(DetectMultiBackend::nndct_elemwise_add_54)
        self.module_55 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/Conv2d[conv]/ret.65(DetectMultiBackend::nndct_conv2d_55)
        self.module_56 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/LeakyReLU[act]/10443(DetectMultiBackend::nndct_leaky_relu_56)
        self.module_57 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/ret.67(DetectMultiBackend::nndct_concat_57)
        self.module_58 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/Conv2d[conv]/ret.69(DetectMultiBackend::nndct_conv2d_58)
        self.module_59 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/LeakyReLU[act]/10469(DetectMultiBackend::nndct_leaky_relu_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=256, out_channels=512, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/Conv2d[conv]/ret.71(DetectMultiBackend::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/LeakyReLU[act]/10491(DetectMultiBackend::nndct_leaky_relu_61)
        self.module_62 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/Conv2d[conv]/ret.73(DetectMultiBackend::nndct_conv2d_62)
        self.module_63 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/LeakyReLU[act]/10513(DetectMultiBackend::nndct_leaky_relu_63)
        self.module_64 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.75(DetectMultiBackend::nndct_conv2d_64)
        self.module_65 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/10535(DetectMultiBackend::nndct_leaky_relu_65)
        self.module_66 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.77(DetectMultiBackend::nndct_conv2d_66)
        self.module_67 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/10557(DetectMultiBackend::nndct_leaky_relu_67)
        self.module_68 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/ret.79(DetectMultiBackend::nndct_elemwise_add_68)
        self.module_69 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/Conv2d[conv]/ret.81(DetectMultiBackend::nndct_conv2d_69)
        self.module_70 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/LeakyReLU[act]/10582(DetectMultiBackend::nndct_leaky_relu_70)
        self.module_71 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/ret.83(DetectMultiBackend::nndct_concat_71)
        self.module_72 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/Conv2d[conv]/ret.85(DetectMultiBackend::nndct_conv2d_72)
        self.module_73 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/LeakyReLU[act]/10608(DetectMultiBackend::nndct_leaky_relu_73)
        self.module_74 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/Conv2d[conv]/ret.87(DetectMultiBackend::nndct_conv2d_74)
        self.module_75 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/LeakyReLU[act]/10630(DetectMultiBackend::nndct_leaky_relu_75)
        self.module_76 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/10645(DetectMultiBackend::nndct_maxpool_76)
        self.module_77 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/10661(DetectMultiBackend::nndct_maxpool_77)
        self.module_78 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/10677(DetectMultiBackend::nndct_maxpool_78)
        self.module_79 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/ret.89(DetectMultiBackend::nndct_concat_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/Conv2d[conv]/ret.91(DetectMultiBackend::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/LeakyReLU[act]/10704(DetectMultiBackend::nndct_leaky_relu_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/Conv2d[conv]/ret.93(DetectMultiBackend::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/LeakyReLU[act]/10726(DetectMultiBackend::nndct_leaky_relu_83)
        self.module_84 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[11]/ret.95(DetectMultiBackend::nndct_resize_84)
        self.module_85 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[12]/ret.97(DetectMultiBackend::nndct_concat_85)
        self.module_86 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/Conv2d[conv]/ret.99(DetectMultiBackend::nndct_conv2d_86)
        self.module_87 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/LeakyReLU[act]/10758(DetectMultiBackend::nndct_leaky_relu_87)
        self.module_88 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.101(DetectMultiBackend::nndct_conv2d_88)
        self.module_89 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/10780(DetectMultiBackend::nndct_leaky_relu_89)
        self.module_90 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.103(DetectMultiBackend::nndct_conv2d_90)
        self.module_91 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/10802(DetectMultiBackend::nndct_leaky_relu_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/Conv2d[conv]/ret.105(DetectMultiBackend::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/LeakyReLU[act]/10824(DetectMultiBackend::nndct_leaky_relu_93)
        self.module_94 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/ret.107(DetectMultiBackend::nndct_concat_94)
        self.module_95 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/Conv2d[conv]/ret.109(DetectMultiBackend::nndct_conv2d_95)
        self.module_96 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/LeakyReLU[act]/10850(DetectMultiBackend::nndct_leaky_relu_96)
        self.module_97 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/Conv2d[conv]/ret.111(DetectMultiBackend::nndct_conv2d_97)
        self.module_98 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/LeakyReLU[act]/10872(DetectMultiBackend::nndct_leaky_relu_98)
        self.module_99 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[15]/ret.113(DetectMultiBackend::nndct_resize_99)
        self.module_100 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[16]/ret.115(DetectMultiBackend::nndct_concat_100)
        self.module_101 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/Conv2d[conv]/ret.117(DetectMultiBackend::nndct_conv2d_101)
        self.module_102 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/LeakyReLU[act]/10904(DetectMultiBackend::nndct_leaky_relu_102)
        self.module_103 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.119(DetectMultiBackend::nndct_conv2d_103)
        self.module_104 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/10926(DetectMultiBackend::nndct_leaky_relu_104)
        self.module_105 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.121(DetectMultiBackend::nndct_conv2d_105)
        self.module_106 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/10948(DetectMultiBackend::nndct_leaky_relu_106)
        self.module_107 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/Conv2d[conv]/ret.123(DetectMultiBackend::nndct_conv2d_107)
        self.module_108 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/LeakyReLU[act]/10970(DetectMultiBackend::nndct_leaky_relu_108)
        self.module_109 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/ret.125(DetectMultiBackend::nndct_concat_109)
        self.module_110 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/Conv2d[conv]/ret.127(DetectMultiBackend::nndct_conv2d_110)
        self.module_111 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/LeakyReLU[act]/10996(DetectMultiBackend::nndct_leaky_relu_111)
        self.module_112 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/Conv2d[conv]/ret.129(DetectMultiBackend::nndct_conv2d_112)
        self.module_113 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/LeakyReLU[act]/11018(DetectMultiBackend::nndct_leaky_relu_113)
        self.module_114 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[19]/ret.131(DetectMultiBackend::nndct_concat_114)
        self.module_115 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/Conv2d[conv]/ret.133(DetectMultiBackend::nndct_conv2d_115)
        self.module_116 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/LeakyReLU[act]/11044(DetectMultiBackend::nndct_leaky_relu_116)
        self.module_117 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.135(DetectMultiBackend::nndct_conv2d_117)
        self.module_118 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/11066(DetectMultiBackend::nndct_leaky_relu_118)
        self.module_119 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.137(DetectMultiBackend::nndct_conv2d_119)
        self.module_120 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/11088(DetectMultiBackend::nndct_leaky_relu_120)
        self.module_121 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/Conv2d[conv]/ret.139(DetectMultiBackend::nndct_conv2d_121)
        self.module_122 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/LeakyReLU[act]/11110(DetectMultiBackend::nndct_leaky_relu_122)
        self.module_123 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/ret.141(DetectMultiBackend::nndct_concat_123)
        self.module_124 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/Conv2d[conv]/ret.143(DetectMultiBackend::nndct_conv2d_124)
        self.module_125 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/LeakyReLU[act]/11136(DetectMultiBackend::nndct_leaky_relu_125)
        self.module_126 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/Conv2d[conv]/ret.145(DetectMultiBackend::nndct_conv2d_126)
        self.module_127 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/LeakyReLU[act]/11158(DetectMultiBackend::nndct_leaky_relu_127)
        self.module_128 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[22]/ret.147(DetectMultiBackend::nndct_concat_128)
        self.module_129 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/Conv2d[conv]/ret.149(DetectMultiBackend::nndct_conv2d_129)
        self.module_130 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/LeakyReLU[act]/11184(DetectMultiBackend::nndct_leaky_relu_130)
        self.module_131 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.151(DetectMultiBackend::nndct_conv2d_131)
        self.module_132 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/LeakyReLU[act]/11206(DetectMultiBackend::nndct_leaky_relu_132)
        self.module_133 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.153(DetectMultiBackend::nndct_conv2d_133)
        self.module_134 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/LeakyReLU[act]/11228(DetectMultiBackend::nndct_leaky_relu_134)
        self.module_135 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/Conv2d[conv]/ret.155(DetectMultiBackend::nndct_conv2d_135)
        self.module_136 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/LeakyReLU[act]/11250(DetectMultiBackend::nndct_leaky_relu_136)
        self.module_137 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/ret.157(DetectMultiBackend::nndct_concat_137)
        self.module_138 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/Conv2d[conv]/ret.159(DetectMultiBackend::nndct_conv2d_138)
        self.module_139 = py_nndct.nn.LeakyReLU(negative_slope=0.1015625, inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/LeakyReLU[act]/11276(DetectMultiBackend::nndct_leaky_relu_139)
        self.module_140 = py_nndct.nn.Conv2d(in_channels=128, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[0]/ret.161(DetectMultiBackend::nndct_conv2d_140)
        self.module_141 = py_nndct.nn.Conv2d(in_channels=256, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[1]/ret.163(DetectMultiBackend::nndct_conv2d_141)
        self.module_142 = py_nndct.nn.Conv2d(in_channels=512, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[2]/ret(DetectMultiBackend::nndct_conv2d_142)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_5 = self.module_5(output_module_0)
        output_module_5 = self.module_6(output_module_5)
        output_module_7 = self.module_7(output_module_5)
        output_module_7 = self.module_8(output_module_7)
        output_module_7 = self.module_9(output_module_7)
        output_module_7 = self.module_10(output_module_7)
        output_module_11 = self.module_11(input=output_module_5, other=output_module_7, alpha=1)
        output_module_12 = self.module_12(output_module_0)
        output_module_12 = self.module_13(output_module_12)
        output_module_11 = self.module_14(dim=1, tensors=[output_module_11,output_module_12])
        output_module_11 = self.module_15(output_module_11)
        output_module_11 = self.module_16(output_module_11)
        output_module_11 = self.module_17(output_module_11)
        output_module_11 = self.module_18(output_module_11)
        output_module_19 = self.module_19(output_module_11)
        output_module_19 = self.module_20(output_module_19)
        output_module_21 = self.module_21(output_module_19)
        output_module_21 = self.module_22(output_module_21)
        output_module_21 = self.module_23(output_module_21)
        output_module_21 = self.module_24(output_module_21)
        output_module_25 = self.module_25(input=output_module_19, other=output_module_21, alpha=1)
        output_module_26 = self.module_26(output_module_25)
        output_module_26 = self.module_27(output_module_26)
        output_module_26 = self.module_28(output_module_26)
        output_module_26 = self.module_29(output_module_26)
        output_module_30 = self.module_30(input=output_module_25, other=output_module_26, alpha=1)
        output_module_31 = self.module_31(output_module_11)
        output_module_31 = self.module_32(output_module_31)
        output_module_30 = self.module_33(dim=1, tensors=[output_module_30,output_module_31])
        output_module_30 = self.module_34(output_module_30)
        output_module_30 = self.module_35(output_module_30)
        output_module_36 = self.module_36(output_module_30)
        output_module_36 = self.module_37(output_module_36)
        output_module_38 = self.module_38(output_module_36)
        output_module_38 = self.module_39(output_module_38)
        output_module_40 = self.module_40(output_module_38)
        output_module_40 = self.module_41(output_module_40)
        output_module_40 = self.module_42(output_module_40)
        output_module_40 = self.module_43(output_module_40)
        output_module_44 = self.module_44(input=output_module_38, other=output_module_40, alpha=1)
        output_module_45 = self.module_45(output_module_44)
        output_module_45 = self.module_46(output_module_45)
        output_module_45 = self.module_47(output_module_45)
        output_module_45 = self.module_48(output_module_45)
        output_module_49 = self.module_49(input=output_module_44, other=output_module_45, alpha=1)
        output_module_50 = self.module_50(output_module_49)
        output_module_50 = self.module_51(output_module_50)
        output_module_50 = self.module_52(output_module_50)
        output_module_50 = self.module_53(output_module_50)
        output_module_54 = self.module_54(input=output_module_49, other=output_module_50, alpha=1)
        output_module_55 = self.module_55(output_module_36)
        output_module_55 = self.module_56(output_module_55)
        output_module_54 = self.module_57(dim=1, tensors=[output_module_54,output_module_55])
        output_module_54 = self.module_58(output_module_54)
        output_module_54 = self.module_59(output_module_54)
        output_module_60 = self.module_60(output_module_54)
        output_module_60 = self.module_61(output_module_60)
        output_module_62 = self.module_62(output_module_60)
        output_module_62 = self.module_63(output_module_62)
        output_module_64 = self.module_64(output_module_62)
        output_module_64 = self.module_65(output_module_64)
        output_module_64 = self.module_66(output_module_64)
        output_module_64 = self.module_67(output_module_64)
        output_module_68 = self.module_68(input=output_module_62, other=output_module_64, alpha=1)
        output_module_69 = self.module_69(output_module_60)
        output_module_69 = self.module_70(output_module_69)
        output_module_68 = self.module_71(dim=1, tensors=[output_module_68,output_module_69])
        output_module_68 = self.module_72(output_module_68)
        output_module_68 = self.module_73(output_module_68)
        output_module_68 = self.module_74(output_module_68)
        output_module_68 = self.module_75(output_module_68)
        output_module_76 = self.module_76(output_module_68)
        output_module_77 = self.module_77(output_module_76)
        output_module_78 = self.module_78(output_module_77)
        output_module_79 = self.module_79(dim=1, tensors=[output_module_68,output_module_76,output_module_77,output_module_78])
        output_module_79 = self.module_80(output_module_79)
        output_module_79 = self.module_81(output_module_79)
        output_module_79 = self.module_82(output_module_79)
        output_module_79 = self.module_83(output_module_79)
        output_module_84 = self.module_84(input=output_module_79, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_84 = self.module_85(dim=1, tensors=[output_module_84,output_module_54])
        output_module_86 = self.module_86(output_module_84)
        output_module_86 = self.module_87(output_module_86)
        output_module_86 = self.module_88(output_module_86)
        output_module_86 = self.module_89(output_module_86)
        output_module_86 = self.module_90(output_module_86)
        output_module_86 = self.module_91(output_module_86)
        output_module_92 = self.module_92(output_module_84)
        output_module_92 = self.module_93(output_module_92)
        output_module_86 = self.module_94(dim=1, tensors=[output_module_86,output_module_92])
        output_module_86 = self.module_95(output_module_86)
        output_module_86 = self.module_96(output_module_86)
        output_module_86 = self.module_97(output_module_86)
        output_module_86 = self.module_98(output_module_86)
        output_module_99 = self.module_99(input=output_module_86, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_99 = self.module_100(dim=1, tensors=[output_module_99,output_module_30])
        output_module_101 = self.module_101(output_module_99)
        output_module_101 = self.module_102(output_module_101)
        output_module_101 = self.module_103(output_module_101)
        output_module_101 = self.module_104(output_module_101)
        output_module_101 = self.module_105(output_module_101)
        output_module_101 = self.module_106(output_module_101)
        output_module_107 = self.module_107(output_module_99)
        output_module_107 = self.module_108(output_module_107)
        output_module_101 = self.module_109(dim=1, tensors=[output_module_101,output_module_107])
        output_module_101 = self.module_110(output_module_101)
        output_module_101 = self.module_111(output_module_101)
        output_module_112 = self.module_112(output_module_101)
        output_module_112 = self.module_113(output_module_112)
        output_module_112 = self.module_114(dim=1, tensors=[output_module_112,output_module_86])
        output_module_115 = self.module_115(output_module_112)
        output_module_115 = self.module_116(output_module_115)
        output_module_115 = self.module_117(output_module_115)
        output_module_115 = self.module_118(output_module_115)
        output_module_115 = self.module_119(output_module_115)
        output_module_115 = self.module_120(output_module_115)
        output_module_121 = self.module_121(output_module_112)
        output_module_121 = self.module_122(output_module_121)
        output_module_115 = self.module_123(dim=1, tensors=[output_module_115,output_module_121])
        output_module_115 = self.module_124(output_module_115)
        output_module_115 = self.module_125(output_module_115)
        output_module_126 = self.module_126(output_module_115)
        output_module_126 = self.module_127(output_module_126)
        output_module_126 = self.module_128(dim=1, tensors=[output_module_126,output_module_79])
        output_module_129 = self.module_129(output_module_126)
        output_module_129 = self.module_130(output_module_129)
        output_module_129 = self.module_131(output_module_129)
        output_module_129 = self.module_132(output_module_129)
        output_module_129 = self.module_133(output_module_129)
        output_module_129 = self.module_134(output_module_129)
        output_module_135 = self.module_135(output_module_126)
        output_module_135 = self.module_136(output_module_135)
        output_module_129 = self.module_137(dim=1, tensors=[output_module_129,output_module_135])
        output_module_129 = self.module_138(output_module_129)
        output_module_129 = self.module_139(output_module_129)
        output_module_140 = self.module_140(output_module_101)
        output_module_141 = self.module_141(output_module_115)
        output_module_129 = self.module_142(output_module_129)
        return (output_module_140,output_module_141,output_module_129)
